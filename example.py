#!/usr/bin/env python3
"""
Example usage of AI Builder
Demonstrates how to use the system programmatically
"""

import sys
from pathlib import Path

# Add the ai_builder directory to Python path
sys.path.append(str(Path(__file__).parent))

from orchestrator import orchestrator
from core.config_manager import config


def example_ecommerce_project():
    """Example: E-commerce system build"""
    
    requirements = """
    X√¢y d·ª±ng h·ªá th·ªëng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ v·ªõi c√°c t√≠nh nƒÉng sau:
    
    1. Qu·∫£n l√Ω s·∫£n ph·∫©m:
       - Th√™m, s·ª≠a, x√≥a s·∫£n ph·∫©m
       - Ph√¢n lo·∫°i s·∫£n ph·∫©m theo danh m·ª•c
       - Qu·∫£n l√Ω inventory v√† stock
       - Upload v√† qu·∫£n l√Ω h√¨nh ·∫£nh s·∫£n ph·∫©m
    
    2. Qu·∫£n l√Ω ƒë∆°n h√†ng:
       - T·∫°o ƒë∆°n h√†ng t·ª´ gi·ªè h√†ng
       - Tracking tr·∫°ng th√°i ƒë∆°n h√†ng
       - Qu·∫£n l√Ω giao h√†ng
       - L·ªãch s·ª≠ ƒë∆°n h√†ng
    
    3. Qu·∫£n l√Ω kh√°ch h√†ng:
       - ƒêƒÉng k√Ω v√† ƒëƒÉng nh·∫≠p
       - Profile management
       - Wishlist v√† favorites
       - Review v√† rating s·∫£n ph·∫©m
    
    4. Thanh to√°n:
       - T√≠ch h·ª£p c·ªïng thanh to√°n (VNPay, Momo)
       - H·ªó tr·ª£ COD
       - Qu·∫£n l√Ω transactions
       - Invoice generation
    
    5. Admin dashboard:
       - Dashboard t·ªïng quan
       - B√°o c√°o doanh thu
       - Qu·∫£n l√Ω users
       - System configuration
    
    Y√™u c·∫ßu k·ªπ thu·∫≠t:
    - H·ªó tr·ª£ 1000+ concurrent users
    - Response time < 2 seconds
    - Mobile-responsive design
    - Security compliance
    - Scalable architecture
    """
    
    context = {
        "budget": "200,000 USD",
        "timeline": "8 months",
        "team_size": "6 developers",
        "target_market": "Vietnam",
        "compliance": ["PCI DSS", "GDPR"],
        "integration_requirements": ["VNPay", "Momo", "GHN", "Viettel Post"]
    }
    
    print("üöÄ Starting AI Builder - E-commerce Project")
    print(f"üìä Configuration: {config.llm.provider} - {config.llm.model_name}")
    print("‚è≥ This may take a few minutes...")
    
    try:
        # Run the build process
        result = orchestrator.build_project(requirements, context)
        
        print("\\n" + "="*80)
        print("üéâ BUILD COMPLETED SUCCESSFULLY!")
        print("="*80)
        
        print(f"üìÅ Output Directory: {config.get_output_path()}")
        print(f"‚è±Ô∏è  Total Duration: {result.get('duration', 0):.2f} seconds")
        print(f"üìù Version: {result['version']}")
        
        # Show build summary
        print("\\nüìã Build Summary:")
        for state_name, state_result in result['states'].items():
            status = state_result.get('status', 'unknown')
            file_count = len(state_result.get('files', []))
            status_emoji = "‚úÖ" if status == "completed" else "‚ùå"
            print(f"   {status_emoji} {state_name.capitalize()}: {status} ({file_count} files)")
        
        # Show generated files
        all_files = []
        for state_result in result['states'].values():
            all_files.extend(state_result.get('files', []))
        
        print(f"\\nüìÑ Generated Files ({len(all_files)}):")
        for file_path in all_files:
            file_name = Path(file_path).name
            print(f"   üìÑ {file_name}")
        
        print("\\nüéØ Next Steps:")
        print("   1. Review generated documents in output directory")
        print("   2. Validate requirements with stakeholders")
        print("   3. Use documents for development planning")
        print("   4. Provide feedback for refinement if needed")
        
        return result
        
    except Exception as e:
        print(f"‚ùå Error during build: {str(e)}")
        return None


def example_refinement():
    """Example: Refine documents with feedback"""
    
    feedback = """
    C·∫ßn c·∫£i thi·ªán c√°c ƒëi·ªÉm sau trong t√†i li·ªáu:
    
    1. BRD c·∫ßn th√™m:
       - Chi ti·∫øt h∆°n v·ªÅ security requirements
       - Compliance requirements cho th·ªã tr∆∞·ªùng Vi·ªát Nam
       - Integration requirements v·ªõi c√°c d·ªãch v·ª• local
    
    2. SRS c·∫ßn th√™m:
       - API specifications chi ti·∫øt
       - Database schema design
       - Performance benchmarks c·ª• th·ªÉ
       - Error handling specifications
    
    3. Architecture c·∫ßn l√†m r√µ:
       - Microservices communication patterns
       - Caching strategy
       - Load balancing approach
       - Disaster recovery plan
    """
    
    print("üîÑ Starting Document Refinement")
    
    try:
        result = orchestrator.refine_with_feedback(feedback, "documents")
        print(f"‚úÖ Refinement completed: {result['status']}")
        return result
        
    except Exception as e:
        print(f"‚ùå Error during refinement: {str(e)}")
        return None


def example_custom_output_dir():
    """Example: Using custom output directory"""
    from core.config_manager import config
    
    # Set custom output directory
    custom_output = Path.home() / "Documents" / "ai_builder_projects" / "ecommerce"
    config.output.base_path = str(custom_output)
    
    # Refresh orchestrator to use new path
    orchestrator.refresh_output_paths()
    
    print(f"üìÅ Using custom output directory: {custom_output}")
    
    requirements = "Build a simple blog system with user authentication and post management"
    
    try:
        result = orchestrator.build_project(requirements)
        print(f"‚úÖ Project built successfully in: {custom_output}")
        return result
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return None


if __name__ == "__main__":
    print("üéØ AI Builder Example Usage")
    print("=" * 50)
    
    # Example 1: Full project build
    print("\\n1Ô∏è‚É£ Running E-commerce Project Build...")
    build_result = example_ecommerce_project()
    
    if build_result:
        print("\\n2Ô∏è‚É£ Running Document Refinement Example...")
        refinement_result = example_refinement()
    
    print("\\nüèÅ Example completed!")
    print("Check the output directory for generated documents.")
